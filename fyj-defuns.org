#+TITLE: Starter Kit Defuns
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* The starter-kit-coding-hook:
A single hook holding those functions which should be run in *every*
code buffer.

We have a number of turn-on-* functions since it's advised that lambda
functions not go in hooks. Repeatedly evaling an add-to-list with a
hook value will repeatedly add it since there's no way to ensure that
a lambda doesn't already exist in the list.

#+name: fyj-hook-functions
#+begin_src emacs-lisp
  (defun fyj-local-column-number-mode ()
    (make-local-variable 'column-number-mode)
    (column-number-mode t))

  (defun fyj-local-comment-auto-fill ()
    (set (make-local-variable 'comment-auto-fill-only-comments) t)
    (auto-fill-mode t))

  (defun fyj-turn-on-save-place-mode ()
    (setq save-place t))

  (defun fyj-turn-on-whitespace ()
    (whitespace-mode t))
#+end_src

#+name: fyj-add-local-column-number-mode
#+begin_src emacs-lisp
(add-hook 'fyj-coding-hook 'fyj-local-column-number-mode)
#+end_src

#+name: start-kit-add-local-comment-auto-fill
#+begin_src emacs-lisp
(add-hook 'fyj-coding-hook 'fyj-local-comment-auto-fill)
#+end_src

#+name: fyj-add-pretty-lambdas
#+begin_src emacs-lisp
  (when (window-system)
    (add-hook 'fyj-coding-hook 'fyj-pretty-lambdas))
#+end_src

#+name: fyj-run-fyj-coding-hook
#+begin_src emacs-lisp
(defun run-fyj-coding-hook ()
  "Enable things that are convenient across all coding buffers."
  (run-hooks 'fyj-coding-hook))
#+end_src

#+srcname: fyj-recentf-ido-find-file
#+begin_src emacs-lisp 
  (defun recentf-ido-find-file () 
    "Find a recent file using Ido." 
    (interactive) 
    (let* ((file-assoc-list 
            (mapcar (lambda (x) 
                      (cons (file-name-nondirectory x) 
                            x)) 
                    recentf-list)) 
           (filename-list 
            (remove-duplicates (mapcar #'car file-assoc-list) 
                               :test #'string=)) 
           (filename (ido-completing-read "Choose recent file: " 
                                          filename-list 
                                          nil 
                                          t))) 
      (when filename 
        (find-file (cdr (assoc filename 
                               file-assoc-list)))))) 
 #+end_src 
