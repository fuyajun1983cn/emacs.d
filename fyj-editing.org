#+TITLE: Common Editor Settings
#+OPTIONS: toc:nil num:nil ^:nil

These are the common settings for editing text.

* Common Editor Settings
** Some basic preferences 
   
#+BEGIN_SRC emacs-lisp
  ;;----------------------------------------------------------------------------
  ;; Some basic preferences
  ;;----------------------------------------------------------------------------
  (message "Some basic preference")
  (setq-default
   blink-cursor-interval 0.4
   bookmark-default-file (expand-file-name ".bookmarks.el" user-emacs-directory)
   buffers-menu-max-size 30
   case-fold-search t
   column-number-mode t
   delete-selection-mode t
   ediff-split-window-function 'split-window-horizontally
   ediff-window-setup-function 'ediff-setup-windows-plain
   indent-tabs-mode nil  ;;make indent commands use space only (never tab character)
   tab-width 4
   indent-tabs-mode nil
   make-backup-files nil
   mouse-yank-at-point t
   save-interprogram-paste-before-kill t
   scroll-preserve-screen-position 'always
   set-mark-command-repeat-pop t
   tooltip-delay 1.5
   truncate-lines nil ;; toggle word wrapping
   truncate-partial-width-windows nil)

  (global-auto-revert-mode)
  (setq global-auto-revert-non-file-buffers t
        auto-revert-verbose nil)

  (transient-mark-mode t)



  (when (fboundp 'global-prettify-symbols-mode)
    (global-prettify-symbols-mode))


  (fyj/package-install-if-needed 'undo-tree)
  (global-undo-tree-mode)
  (diminish 'undo-tree-mode)




  ;;----------------------------------------------------------------------------
  ;; Don't disable narrowing commands
  ;;----------------------------------------------------------------------------
  (put 'narrow-to-region 'disabled nil)
  (put 'narrow-to-page 'disabled nil)
  (put 'narrow-to-defun 'disabled nil)

  ;;----------------------------------------------------------------------------
  ;; Show matching parens
  ;;----------------------------------------------------------------------------
  (show-paren-mode 1)

  ;;----------------------------------------------------------------------------
  ;; Expand region
  ;;----------------------------------------------------------------------------
  (fyj/package-install-if-needed 'expand-region)
  (global-set-key (kbd "C-=") 'er/expand-region)


  ;;----------------------------------------------------------------------------
  ;; Don't disable case-change functions
  ;;----------------------------------------------------------------------------
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)

  (message "基本设置完成")

#+END_SRC
   
** Killing Text
     From :
     [[https://github.com/itsjeyd/emacs-config/blob/emacs24/init.el]]
     #+BEGIN_SRC emacs-lisp
       (defadvice kill-region (before slick-cut activate compile)
         "When called interactively with no active region, kill a single line instead."
         (interactive
           (if mark-active (list (region-beginning) (region-end))
             (list (line-beginning-position)
               (line-beginning-position 2)))))
     #+END_SRC    
** Navigation
*** Pop to mark
     Handy way of getting back to previous places.
     #+BEGIN_SRC emacs-lisp
       (bind-key "C-x p" 'pop-to-mark-command)
       (setq set-mark-command-repeat-pop t)
     #+END_SRC
** Improve the performance of Emacs's Dispaly Engine
   #+BEGIN_SRC emacs-lisp
     (setq redisplay-dont-pause t)   
   #+END_SRC
** Move Cursor to Brackets
   #+BEGIN_SRC emacs-lisp
     (defvar xah-brackets nil "string of left/right brackets pairs.")
     (setq xah-brackets "()[]{}<>（）［］｛｝⦅⦆〚〛⦃⦄“”‘’‹›«»「」〈〉《》【】〔〕⦗⦘『』〖〗〘〙｢｣⟦⟧⟨⟩⟪⟫⟮⟯⟬⟭⌈⌉⌊⌋⦇⦈⦉⦊❛❜❝❞❨❩❪❫❴❵❬❭❮❯❰❱❲❳〈〉⦑⦒⧼⧽﹙﹚﹛﹜﹝﹞⁽⁾₍₎⦋⦌⦍⦎⦏⦐⁅⁆⸢⸣⸤⸥⟅⟆⦓⦔⦕⦖⸦⸧⸨⸩｟｠⧘⧙⧚⧛⸜⸝⸌⸍⸂⸃⸄⸅⸉⸊᚛᚜༺༻༼༽⏜⏝⎴⎵⏞⏟⏠⏡﹁﹂﹃﹄︹︺︻︼︗︘︿﹀︽︾﹇﹈︷︸")

     (defvar xah-left-brackets '("(" "{" "[" "<" "〔" "【" "〖" "〈" "《" "「" "『" "“" "‘" "‹" "«" )
       "List of left bracket chars.")
     (progn
     ;; make xah-left-brackets based on xah-brackets
       (setq xah-left-brackets '())
       (dotimes (-x (- (length xah-brackets) 1))
         (when (= (% -x 2) 0)
           (push (char-to-string (elt xah-brackets -x))
                 xah-left-brackets)))
       (setq xah-left-brackets (reverse xah-left-brackets)))

     (defvar xah-right-brackets '(")" "]" "}" ">" "〕" "】" "〗" "〉" "》" "」" "』" "”" "’" "›" "»")
       "list of right bracket chars.")
     (progn
       (setq xah-right-brackets '())
       (dotimes (-x (- (length xah-brackets) 1))
         (when (= (% -x 2) 1)
           (push (char-to-string (elt xah-brackets -x))
                 xah-right-brackets)))
       (setq xah-right-brackets (reverse xah-right-brackets)))


     (defun xah-backward-left-bracket ()
       "Move cursor to the previous occurrence of left bracket.
     The list of brackets to jump to is defined by `xah-left-brackets'.
     URL `http://ergoemacs.org/emacs/emacs_navigating_keys_for_brackets.html'
     Version 2015-10-01"
       (interactive)
       (search-backward-regexp (regexp-opt xah-left-brackets) nil t))

     (defun xah-forward-right-bracket ()
       "Move cursor to the next occurrence of right bracket.
     The list of brackets to jump to is defined by `xah-right-brackets'.
     URL `http://ergoemacs.org/emacs/emacs_navigating_keys_for_brackets.html'
     Version 2015-10-01"
       (interactive)
       (search-forward-regexp (regexp-opt xah-right-brackets) nil t))

     (global-set-key (kbd "C-c <left>") 'xah-backward-left-bracket)
     (global-set-key (kbd "C-c <right>") 'xah-forward-right-bracket)
   #+END_SRC
** select text between brackets
    #+BEGIN_SRC emacs-lisp
      (defun xah-select-text-in-bracket ()
        "Select text between the nearest brackets.
      ➢ for example:  () [] {} «» ‹› “” 〖〗 【】 「」 『』 （） 〈〉 《》 〔〕 ⦗⦘ 〘〙 ⦅⦆ 〚〛 ⦃⦄ ⟨⟩."
        (interactive)
        (let (pos p1 p2 (parse-sexp-lookup-properties nil)
                  (-temp-syn-table (make-syntax-table)))
          (modify-syntax-entry ?\« "(»" -temp-syn-table)
          (modify-syntax-entry ?\» ")«" -temp-syn-table)
          (modify-syntax-entry ?\‹ "(›" -temp-syn-table)
          (modify-syntax-entry ?\› ")‹" -temp-syn-table)
          (modify-syntax-entry ?\“ "(”" -temp-syn-table)
          (modify-syntax-entry ?\” ")“" -temp-syn-table)
          (modify-syntax-entry ?\〖 "(〗"  -temp-syn-table)
          (modify-syntax-entry ?\〗")〖" -temp-syn-table)
          (modify-syntax-entry ?\【 "(】" -temp-syn-table)
          (modify-syntax-entry ?\】 ")】" -temp-syn-table)
          
          (with-syntax-table -temp-syn-table
            (setq pos (point))
            (search-backward-regexp "\\s(" nil t )
            (setq p1 (point))
            (forward-sexp 1)
            (setq p2 (point))
            (goto-char (1+ p1))
            (set-mark (1- p2)))))

      (global-set-key (kbd "C-c f s") 'xah-select-text-in-bracket)
    #+END_SRC
** use TRAMP to edit current file as root
    #+BEGIN_SRC emacs-lisp
      (defun sudo ()
        "Use TRAMP to `sudo' the current buffer"
        (interactive)
        (when buffer-file-name
          (find-alternate-file
           (concat "/sudo:root@localhost:"
                   buffer-file-name))))    
    #+END_SRC
** 选择一个word或当前行
     - 选中光标所有的word
       #+BEGIN_SRC emacs-lisp
         (transient-mark-mode 1)

         (defun select-current-word ()
           "Select the word under cursor. "
           (interactive)
           (let (pt)
             (skip-chars-backward "-_A-Za-z0-9")
             (setq pt (point))
             (skip-chars-forward "-_A-Za-z0-z")
             (set-mark pt)))
       #+END_SRC

     - 选中当前光标所在的行
       #+BEGIN_SRC emacs-lisp
         (transient-mark-mode 1)
         (defun select-current-line ()
           "Select the current line under cursor."
           (interactive)
           (end-of-line)
           (set-mark (line-beginning-position)))
       #+END_SRC

     - 快捷键设置
       #+BEGIN_SRC emacs-lisp
         (global-set-key (kbd "C-c fw") 'select-current-word)
         (global-set-key (kbd "C-c fl") 'select-current-line)
       #+END_SRC
* Key Binding  
#+BEGIN_SRC emacs-lisp
  ;;----------------------------------------------------------------------------
  ;; Handy key bindings
  ;;----------------------------------------------------------------------------
  ;; To be able to M-x without meta
  (global-set-key (kbd "C-x C-m") 'execute-extended-command)

  ;; Vimmy alternatives to M-^ and C-u M-^
  (global-set-key (kbd "C-c j") 'join-line)
  (global-set-key (kbd "C-c J") (lambda () (interactive) (join-line 1)))

  (global-set-key (kbd "C-.") 'set-mark-command)
  (global-set-key (kbd "C-x C-.") 'pop-global-mark)


  ;; Train myself to use M-f and M-b instead
  (global-unset-key [M-left])
  (global-unset-key [M-right])



  (defun kill-back-to-indentation ()
    "Kill from point back to the first non-whitespace character on the line."
    (interactive)
    (let ((prev-pos (point)))
      (back-to-indentation)
      (kill-region (point) prev-pos)))

  (global-set-key (kbd "C-M-<backspace>") 'kill-back-to-indentation)

  (message "Key Binding")

#+END_SRC 
   
** some more settings  

#+BEGIN_SRC emacs-lisp :tangle no
  ;;----------------------------------------------------------------------------
  ;; Page break lines
  ;;----------------------------------------------------------------------------
  (fyj/package-install-if-needed 'page-break-lines)
  (global-page-break-lines-mode)
  (diminish 'page-break-lines-mode)

  ;;----------------------------------------------------------------------------
  ;; Shift lines up and down with M-up and M-down. When paredit is enabled,
  ;; it will use those keybindings. For this reason, you might prefer to
  ;; use M-S-up and M-S-down, which will work even in lisp modes.
  ;;----------------------------------------------------------------------------
  (fyj/package-install-if-needed 'move-dup)
  (global-set-key [M-up] 'md/move-lines-up)
  (global-set-key [M-down] 'md/move-lines-down)
  (global-set-key [M-S-up] 'md/move-lines-up)
  (global-set-key [M-S-down] 'md/move-lines-down)

  (global-set-key (kbd "C-c p") 'md/duplicate-down)
  (global-set-key (kbd "C-c P") 'md/duplicate-up)

  ;;----------------------------------------------------------------------------
  ;; Fix backward-up-list to understand quotes, see http://bit.ly/h7mdIL
  ;;----------------------------------------------------------------------------
  (defun backward-up-sexp (arg)
    "Jump up to the start of the ARG'th enclosing sexp."
    (interactive "p")
    (let ((ppss (syntax-ppss)))
      (cond ((elt ppss 3)
             (goto-char (elt ppss 8))
             (backward-up-sexp (1- arg)))
            ((backward-up-list arg)))))

  (global-set-key [remap backward-up-list] 'backward-up-sexp) ; C-M-u, C-M-up


  ;;----------------------------------------------------------------------------
  ;; Cut/copy the current line if no region is active
  ;;----------------------------------------------------------------------------
  (fyj/package-install-if-needed 'whole-line-or-region)
  (whole-line-or-region-mode t)
  (diminish 'whole-line-or-region-mode)
  (make-variable-buffer-local 'whole-line-or-region-mode)

  (defun suspend-mode-during-cua-rect-selection (mode-name)
    "Add an advice to suspend `MODE-NAME' while selecting a CUA rectangle."
    (let ((flagvar (intern (format "%s-was-active-before-cua-rectangle" mode-name)))
          (advice-name (intern (format "suspend-%s" mode-name))))
      (eval-after-load 'cua-rect
        `(progn
           (defvar ,flagvar nil)
           (make-variable-buffer-local ',flagvar)
           (defadvice cua--activate-rectangle (after ,advice-name activate)
             (setq ,flagvar (and (boundp ',mode-name) ,mode-name))
             (when ,flagvar
               (,mode-name 0)))
           (defadvice cua--deactivate-rectangle (after ,advice-name activate)
             (when ,flagvar
               (,mode-name 1)))))))

  (suspend-mode-during-cua-rect-selection 'whole-line-or-region-mode)


   

  (defun sanityinc/open-line-with-reindent (n)
    "A version of `open-line' which reindents the start and end positions.
  If there is a fill prefix and/or a `left-margin', insert them
  on the new line if the line would have been blank.
  With arg N, insert N newlines."
    (interactive "*p")
    (let* ((do-fill-prefix (and fill-prefix (bolp)))
           (do-left-margin (and (bolp) (> (current-left-margin) 0)))
           (loc (point-marker))
           ;; Don't expand an abbrev before point.
           (abbrev-mode nil))
      (delete-horizontal-space t)
      (newline n)
      (indent-according-to-mode)
      (when (eolp)
        (delete-horizontal-space t))
      (goto-char loc)
      (while (> n 0)
        (cond ((bolp)
               (if do-left-margin (indent-to (current-left-margin)))
               (if do-fill-prefix (insert-and-inherit fill-prefix))))
        (forward-line 1)
        (setq n (1- n)))
      (goto-char loc)
      (end-of-line)
      (indent-according-to-mode)))

  (global-set-key (kbd "C-o") 'sanityinc/open-line-with-reindent)


  ;;----------------------------------------------------------------------------
  ;; Random line sorting
  ;;----------------------------------------------------------------------------
  (defun sort-lines-random (beg end)
    "Sort lines in region randomly."
    (interactive "r")
    (save-excursion
      (save-restriction
        (narrow-to-region beg end)
        (goto-char (point-min))
        (let ;; To make `end-of-line' and etc. to ignore fields.
            ((inhibit-field-text-motion t))
          (sort-subr nil 'forward-line 'end-of-line nil nil
                     (lambda (s1 s2) (eq (random 2) 0)))))))


   

  (fyj/package-install-if-needed 'highlight-escape-sequences)
  (hes-mode)

  (message "some more settings")

#+END_SRC

** enable guide-key 
     显示按键提示
     #+BEGIN_SRC emacs-lisp
       (use-package guide-key
         :ensure t
         :config
         (progn
           (setq guide-key/guide-key-sequence '("C-x" "C-c" "C-x 4" "C-x 5" "C-c ;" "C-c ; f" "C-c ' f" "C-x n" "C-x C-r" "C-x r"))
           (guide-key-mode 1)
           (diminish 'guide-key-mode)))
     #+END_SRC

** next-screen-context-lines 
   The page up/down buttons will scroll up or down a screenful of
   text, retaining 2 lines of text for context.You can change the
   amount of overlap whe nyou page through text by altering the variable
   =next-screen-context-lines= directly in your init file. 
   #+BEGIN_SRC emacs-lisp
     (setq next-screen-context-lines  3)
   #+END_SRC


** scroll Text
   one line a time
   #+BEGIN_SRC emacs-lisp
     (defalias 'scroll-ahead 'scroll-up)
     (defalias 'scroll-behind 'scroll-down)

     (defun scroll-N-lines-ahead (&optional n)
       "scroll up one line"
       (interactive "P")
       (scroll-ahead (prefix-numeric-value n)))

     (defun scroll-N-lines-behind (&optional n)
       (interactive "P")
       (scroll-behind (prefix-numeric-value n)))

     (global-set-key (kbd "C-q") 'scroll-N-lines-behind)
     (global-set-key (kbd "C-z") 'scroll-N-lines-ahead)

     ;;rebind quoted-insert
     (global-set-key (kbd "C-x C-q") 'quoted-insert)
   #+END_SRC

