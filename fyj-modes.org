#+TITLE:  模式设置
#+AUTHOR: 付亚军
#+EMAIL:  fuyajun1983cn@163.com

* navigation
** Dired
     From
     http://www.masteringemacs.org/articles/2011/03/25/working-multiple-files-dired/
     #+BEGIN_SRC emacs-lisp
       (require 'find-dired)
       (setq find-ls-option '("-print0 | xargs -0 ls -ld" . "-ld"))     
     #+END_SRC
** Window Movement
    #+BEGIN_SRC emacs-lisp
      (defun other-window-backward (&optional n)
        "Select the Nth previous window."
        (interactive "P")
        (other-window (- (prefix-numeric-value n))))

      ;;The capital P means "when called interactively, leave the
      ;;prefix argument in raw form and
      ;;assign it to n."

      ;;prefix-numeric-value
      ;;return n unchanged if it's a number, and return 1 if it's nil.

      (global-set-key (kbd "C-x C-p") 'other-window-backward)
      (global-set-key (kbd "C-x C-n") 'other-window)
    #+END_SRC

** ido mode
  ido-mode is like magic pixie dust!
  #+begin_src emacs-lisp :tangle no
  (when (> emacs-major-version 21)
    (ido-mode t)
    (setq ido-enable-prefix nil
          ido-enable-flex-matching t
          ido-everything t
          ido-create-new-buffer 'always
          ido-max-prospects 10))
  #+end_src
** smex
   快速输入命令
   from https://github.com/nonsequitur/smex.git
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package smex
       :ensure t
       )
     (require 'smex) ; Not needed if you use package.el
     (smex-initialize) ; Can be omitted. This might cause a (minimal) delay
                                             ; when Smex is auto-initialized on its first run.
     (global-set-key (kbd "M-x") 'smex)
     (global-set-key (kbd "M-X") 'smex-major-mode-commands)
     ;; This is your old M-x.
     (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
   #+END_SRC
** Helm  - interactive completion

    Tutorial: http://tuhdo.github.io/helm-intro.html

     #+BEGIN_SRC emacs-lisp
       (use-package helm
         :ensure t
         :config
         (progn
           (require 'helm)
           (require 'helm-config)))

       ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
       ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
       ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
       (global-set-key (kbd "C-c h") 'helm-command-prefix)
       (global-unset-key (kbd "C-x c"))

       (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
       (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
       (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

       (when (executable-find "curl")
         (setq helm-google-suggest-use-curl-p t))

       (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
             helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
             helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
             helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
             helm-ff-file-name-history-use-recentf t)

       (helm-mode 1)

     #+END_SRC
*** Autoresize
    Helm can resize its buffer automatically to fit with the number of
    candidates by enabling =helm-autoresize-mode=:
    #+BEGIN_SRC emacs-lisp
      (helm-autoresize-mode t)    
    #+END_SRC
*** Command: =helm-M-x=
    #+BEGIN_SRC emacs-lisp 
      (global-set-key (kbd "M-x") 'helm-M-x)
      (setq helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x
    #+END_SRC
*** Command: =helm-show-kill-ring=
    #+BEGIN_SRC emacs-lisp 
      (global-set-key (kbd "M-y") 'helm-show-kill-ring)    
    #+END_SRC
*** Command: =helm-mini=
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-x b") 'helm-mini)

      ;;To enable fuzzy matching, add the following settings:
      (setq helm-buffers-fuzzy-matching t
            helm-recentf-fuzzy-match    t)
    #+END_SRC
*** Command: =helm-find-files=
    #+BEGIN_SRC emacs-lisp 
      (global-set-key (kbd "C-x C-f") 'helm-find-files)    
    #+END_SRC
** =helm-projectile= 
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :ensure t)
     (use-package helm-projectile
       :ensure t)
     (projectile-global-mode)
     (setq projectile-completion-system 'helm)
     (setq projectile-enable-caching t)
     (helm-projectile-on)   
   #+END_SRC

** Helm-swoop - quickly finding lines
   This promises to be a fast way to find things. Let’s bind it to
   Ctrl-Shift-S to see if I can get used to that…
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package helm-swoop
      :ensure t
      :bind
      (("C-S-s" . helm-swoop)
       ("M-i" . helm-swoop)
       ("M-s s" . helm-swoop)
       ("M-s M-s" . helm-swoop)
       ("M-I" . helm-swoop-back-to-last-point)
       ("C-c M-i" . helm-multi-swoop)
       ("C-x M-i" . helm-multi-swoop-all)
       )
      :config
      (progn
        (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
        (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop))
     )
   #+END_SRC

** avy
   =avy= is a GNU Emacs package for jumping to visible text using a
   char-based decision tree.
   #+BEGIN_SRC emacs-lisp
     (use-package avy-menu
       :ensure t)

     (global-set-key (kbd "C-:") 'avy-goto-char)
   #+END_SRC
* programming
** auto complete mode
#+BEGIN_SRC emacs-lisp
  ;;                                             ;;
  ;;**************auto-complete模式相关配置*******;;
  ;;                                             ;;
  ;;*********************************************;;
  (fyj/package-install-if-needed 'auto-complete)
  (require 'auto-complete-config)
  (ac-config-default)
  ;;(add-to-list 'ac-dictionary-directories "~/.emacs.d/mode/auto-complete/dict")
  (define-key ac-mode-map (kbd "M-/") 'auto-complete);;auto-complete command
  ;;trigger auto-complete
  ;(ac-set-trigger-key "TAB")
  (setq ac-auto-start 3);当播入3个字符的时候，开始自动补全
  ;;complete menu color
  (set-face-background 'ac-candidate-face "lightgray")
  (set-face-underline 'ac-candidate-face "darkgray")
  (set-face-background 'ac-selection-face "steelblue")
  ;My Dictionary
  ;;(add-to-list 'ac-user-dictionary-files "~/.emacs.d/mydict")

#+END_SRC
** Org Mode
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'ac-modes 'org-mode)   
   #+END_SRC
** Yasnippet
      [[http://code.google.com/p/yasnippet/][yasnippet]] is yet another snippet expansion system for Emacs.  It
      is inspired by TextMate's templating syntax. 
      - watch the [[http://www.youtube.com/watch?v=vOj7btx3ATg][video on YouTube]]
      - see the [[http://yasnippet.googlecode.com/svn/trunk/doc/index.html][intro and tutorial]]

*** Install Yasnippet
   :PROPERTIES:
   :CUSTOM_ID: install
   :END:
    #+begin_src emacs-lisp
  (fyj/package-install-if-needed 'yasnippet)

  ;; If `yasnippet-bundle' has previously been installed through ELPA,
  ;; delete it before installing the new `yasnippet'
  (let ((yas-bundle-desc (assq 'yasnippet-bundle package-alist)))
    (when yas-bundle-desc
      (package-delete "yasnippet-bundle"
                      (package-version-join
                       (package-desc-vers (cdr yas-bundle-desc))))))
#+end_src

*** Put yasnippet directories on the load path
   :PROPERTIES:
   :CUSTOM_ID: snippet-paths
   :END:
#+begin_src emacs-lisp
  (add-to-list 'load-path
               (expand-file-name  "yasnippet"
                                  (expand-file-name "src"
                                                    fyj-dir)))
#+end_src

*** Load Yasnippet
    :PROPERTIES:
    :CUSTOM_ID: load
    :END:
    #+begin_src emacs-lisp
     (require 'yasnippet)
     (yas-global-mode 1)
    #+end_src

*** Load Snippets Distributed with the Starter Kit
   :PROPERTIES:
   :CUSTOM_ID: default-snippets
   :END:
    Load the snippets defined in the =./snippets/= directory.
    #+begin_src emacs-lisp
       ;;(yas/load-directory (expand-file-name "snippets" fyj-dir))
       (setq yas-snippet-dirs (expand-file-name "snippets" fyj/emacs-directory))
     #+end_src

*** Configure Yasnippets for Org Mode
   :PROPERTIES:
   :CUSTOM_ID: org-mode
   :END:

    The latest version of yasnippets doesn't play well with Org-mode, the
    following function allows these two to play nicely together.
    #+begin_src emacs-lisp
      (defun yas/org-very-safe-expand ()
        (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))

      (defun yas/org-setup ()
        ;; yasnippet (using the new org-cycle hooks)
        (make-variable-buffer-local 'yas/trigger-key)
        (setq yas/trigger-key [tab])
        (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
        (define-key yas/keymap [tab] 'yas/next-field))

      ;; See https://github.com/eschulte/emacs24-starter-kit/issues/80.
      (setq org-src-tab-acts-natively nil)

      (add-hook 'org-mode-hook #'yas/org-setup)
    #+end_src

** cmake mode
     - 安装CMake Mode包：
     #+BEGIN_SRC emacs-lisp :tangle no
       (use-package cmake-mode
         :config
         (progn
           (require 'cmake-mode)
           (setq auto-mode-alist
                 (append '(("CMakeLists\\.txt\\'" . cmake-mode)
                           ("\\.cmake\\'" . cmake-mode))
                         auto-mode-alist))))
       #+END_SRC

     - [[https://github.com/alamaison/emacs-cmake-project][CMake Project]] 
       A minor-mode integrating the CMake build process with the Emacs
       ecosystem.
       1. 基本配置
          #+BEGIN_SRC emacs-lisp :tangle no
            (use-package cmake-project
              :ensure t
              :config
               (require 'cmake-project))
            (defun maybe-cmake-project-hook ()
              (if (file-exists-p "CMakeLists.txt") (cmake-project-mode)))
            (add-hook 'c-mode-hook 'maybe-cmake-project-hook)
            (add-hook 'c++-mode-hook 'maybe-cmake-project-hook)
          #+END_SRC

       2. 基本用法
          - Use =M-x cmake-project-configure-project= to configure or
            reconfigure a CMake build tree.

          - This mode makes the compile command, =M-x compile=, build
            the project by default via CMake in a =bin= subdirectory of
            the project source root directory.

** Web
*** Javascript
    #+BEGIN_SRC emacs-lisp
      (use-package js2-mode
       :config 
         (require 'js2-mode)
         (add-to-list 'auto-mode-alist '("\\.js[x]?\\'" . js2-mode)))
    #+END_SRC

*** JSON
    #+BEGIN_SRC emacs-lisp
    
      (add-to-list 'auto-mode-alist '("\\.json\\'\\|\\.jshintrc\\'" . js-mode))

      (setq js-indent-level 2)
    #+END_SRC

*** CSS
    #+BEGIN_SRC emacs-lisp
      ;(use-package rainbow-mode)
      (add-hook 'css-mode-hook
                'rainbow-mode)
    #+END_SRC

** Plant UML
    An open source UML definition language
    #+BEGIN_SRC emacs-lisp
      (require 'plantuml-mode)
      (setq org-plantuml-jar-path
                  "/home/mtk71339/playground/plantuml.jar")
    #+END_SRC
* editor
** Undo tree mode - visualize your undos and branches
     People often struggle with the Emacs undo model, where there’s
     really no concept of “redo” - you simply undo the undo. # This
     lets you use =C-x u (undo-tree-visualize)= to visually walk through
     the changes you’ve made, undo back to a certain point (or redo),
     and go down different branches.

     #+BEGIN_SRC emacs-lisp
       (use-package undo-tree
         :diminish undo-tree-mode
         :config
         (progn
           (global-undo-tree-mode)
           (setq undo-tree-visualizer-timestamps t)
           (setq undo-tree-visualizer-diff t)))
     #+END_SRC
** electric pair mode  
Electric Pair mode is a global minor mode. When enabled, typing an
open parenthesis automatically inserts the corresponding closing
parenthesis. 

#+BEGIN_SRC emacs-lisp
  (use-package unfill)

  (when (fboundp 'electric-pair-mode)
    (electric-pair-mode 1))

  (when (eval-when-compile (version< "24.4" emacs-version))
    (electric-indent-mode 1))
#+END_SRC
** Recent files

     #+BEGIN_SRC emacs-lisp
       (require 'recentf)
       (setq recentf-max-saved-items 200
             recentf-max-menu-items 15)
       (recentf-mode)
     #+END_SRC
** Markdown Mode
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package markdown-mode)
     (after-load 'whitespace-cleanup-mode
       (push 'markdown-mode whitespace-cleanup-mode-ignore-modes))

   #+END_SRC
** Minibuffer editing - more space!
   Sometimes you want to be able to do fancy things with the text that
   you’re entering into the minibuffer. Sometimes you just want to be
   able to read it, especially when it comes to lots of text. This binds
   =C-M-e= in a minibuffer) so that you can edit the contents of the
   minibuffer before submitting it.
   #+BEGIN_SRC emacs-lisp
     (use-package miniedit
       :defer t
       :ensure t
       :commands minibuffer-edit
       :init (miniedit-install))   
   #+END_SRC
** Smartscan
   From https://github.com/itsjeyd/emacs-config/blob/emacs24/init.el,
   this makes =M-n= and =M-p= look for the symbol at point.
   #+BEGIN_SRC emacs-lisp
     (use-package smartscan
       :defer t
       :config (global-smartscan-mode t))   
   #+END_SRC
** multiple cursor editing
    from https://github.com/magnars/multiple-cursors.el
    #+BEGIN_SRC emacs-lisp
      (use-package multiple-cursors)
      (require 'multiple-cursors)
    #+END_SRC
    When you have an active region that spans multiple lines, the
    following will add a cursor to each line:
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)    
    #+END_SRC
    When you want to add multiple cursors not based on continuous
    lines, but based on keywords in the buffer, use:
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C->") 'mc/mark-next-like-this)
      (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
      (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)    
    #+END_SRC
    First mark the word, then add more cursors.

    To get out of multiple-cursors-mode, press =<return>= or =C-g=. The latter
    will first disable multiple regions before disabling multiple
    cursors. If you want to insert a newline in multiple-cursors-mode, use
    =C-j= .
** diffview-mode
    from https://github.com/mgalgs/diffview-mode.git
    #+BEGIN_SRC emacs-lisp
      (use-package diffview)
    #+END_SRC
    The following functions are provided for launching a side-by-side
    diff:
    - =diffview-current=: diffview-current
    - =diffview-current=:  View the current diff region side-by-side
    - =diffview-message=: View the current email message (which
      presumably contains a patch) side-by-side
** flycheck
   语法检查器
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :config (global-flycheck-mode))   
   #+END_SRC
* Version Control
** Magit Mode
   Magit模式是emacs下的一个非常好用的git操作界面。
*** 安装 (注：只支持emacs 24.4之后的版本)
    #+BEGIN_SRC emacs-lisp
      (when (version<= "24.4" emacs-version)
        (use-package magit))
    #+END_SRC

*** 基本操作指南

    1. 查看项目状态
       #+BEGIN_SRC sh
       magit-status
       #+END_SRC

    2. 查看差异

       使用Tab键可以调用diff查看差异（magit-section-toggle）

    3. 常用的几个命令
       - magit-stage  Press [s] to add file unser cursor to stage.

       - magit-stage-modified  Press [S] to add all tracked files to stage.

       - magit-unstage  Press [u] to unstage the file under cursor.

       - magit-reset-index  press [U] to unstage all staged files.

       - Press [c c ] to write a commit message, then [C - c C -c ] to
         commit.

    4. git push

       press [P P] to push. (magit-push-pop)

    5. git pull

       press [F F] to pull. (magit-pull-popup)

    6. git log

       call magit-log to see your commit log. Press Enter on a a line
       to see its diff.




