#+TITLE:  模式设置
#+AUTHOR: 付亚军
#+EMAIL:  fuyajun1983cn@163.com

* navigation

** Winner Mode
     =winner-mode= lets you use =C-c <left>= and =C-c <right>= to switch
     between window configurations. This is handy when something has
     popped up a buffer that you want to look at briefly before
     returning to whatever you were working on. When you’re done,
     press =C-c <left>=.

     #+BEGIN_SRC emacs-lisp
       (use-package winner
         :ensure t
         :defer t)
     #+END_SRC

** Windmove - switching between windows
     Windmove lets you move between windows with something more
     natural than cycling through C-x o (other-window). Windmove
     doesn’t behave well with Org, so we need to use different
     keybindings.

     #+BEGIN_SRC emacs-lisp
       (use-package windmove
         :ensure t
         :defer t
         :bind
         (("<f2> <right>" . windmove-right)
          ("<f2> <left>" . windmove-left)
          ("<f2> <up>" . windmove-up)
          ("<f2> <down>" . windmove-down)
          ))
     #+END_SRC

*** More window movement
      #+BEGIN_SRC emacs-lisp
        (use-package switch-window
          :ensure t
          :bind (("C-x o" . switch-window)))
      #+END_SRC
** Save a list of recent files visited.
#+begin_src emacs-lisp 
(recentf-mode 1)
#+end_src emacs-lisp
** ido mode
ido-mode is like magic pixie dust!
#+srcname: fyj-loves-ido-mode
#+begin_src emacs-lisp 
(when (> emacs-major-version 21)
  (ido-mode t)
  (setq ido-enable-prefix nil
        ido-enable-flex-matching t
        ido-create-new-buffer 'always
;        ido-use-filename-at-point t
        ido-max-prospects 10))
#+end_src

** Helm  - interactive completion
* programming
** auto complete mode
#+BEGIN_SRC emacs-lisp
  ;;                                             ;;
  ;;**************auto-complete模式相关配置*******;;
  ;;                                             ;;
  ;;*********************************************;;
  (fyj/package-install-if-needed 'auto-complete)
  (require 'auto-complete-config)
  (ac-config-default)
  ;;(add-to-list 'ac-dictionary-directories "~/.emacs.d/mode/auto-complete/dict")
  (define-key ac-mode-map (kbd "M-/") 'auto-complete);;auto-complete command
  ;;trigger auto-complete
  ;(ac-set-trigger-key "TAB")
  (setq ac-auto-start 3);当播入3个字符的时候，开始自动补全
  ;;complete menu color
  (set-face-background 'ac-candidate-face "lightgray")
  (set-face-underline 'ac-candidate-face "darkgray")
  (set-face-background 'ac-selection-face "steelblue")
  ;My Dictionary
  ;;(add-to-list 'ac-user-dictionary-files "~/.emacs.d/mydict")

#+END_SRC
** Yasnippet
      [[http://code.google.com/p/yasnippet/][yasnippet]] is yet another snippet expansion system for Emacs.  It
      is inspired by TextMate's templating syntax. 
      - watch the [[http://www.youtube.com/watch?v=vOj7btx3ATg][video on YouTube]]
      - see the [[http://yasnippet.googlecode.com/svn/trunk/doc/index.html][intro and tutorial]]

*** Install Yasnippet
   :PROPERTIES:
   :CUSTOM_ID: install
   :END:
    #+begin_src emacs-lisp
  (fyj/package-install-if-needed 'yasnippet)

  ;; If `yasnippet-bundle' has previously been installed through ELPA,
  ;; delete it before installing the new `yasnippet'
  (let ((yas-bundle-desc (assq 'yasnippet-bundle package-alist)))
    (when yas-bundle-desc
      (package-delete "yasnippet-bundle"
                      (package-version-join
                       (package-desc-vers (cdr yas-bundle-desc))))))
#+end_src

*** Put yasnippet directories on the load path
   :PROPERTIES:
   :CUSTOM_ID: snippet-paths
   :END:
#+begin_src emacs-lisp
  (add-to-list 'load-path
               (expand-file-name  "yasnippet"
                                  (expand-file-name "src"
                                                    fyj-dir)))
#+end_src

*** Load Yasnippet
    :PROPERTIES:
    :CUSTOM_ID: load
    :END:
    #+begin_src emacs-lisp
     (require 'yasnippet)
     (yas-global-mode 1)
    #+end_src

*** Load Snippets Distributed with the Starter Kit
   :PROPERTIES:
   :CUSTOM_ID: default-snippets
   :END:
    Load the snippets defined in the =./snippets/= directory.
    #+begin_src emacs-lisp
       ;;(yas/load-directory (expand-file-name "snippets" fyj-dir))
       (setq yas-snippet-dirs (expand-file-name "snippets" fyj/emacs-directory))
     #+end_src

*** Configure Yasnippets for Org Mode
   :PROPERTIES:
   :CUSTOM_ID: org-mode
   :END:

    The latest version of yasnippets doesn't play well with Org-mode, the
    following function allows these two to play nicely together.
    #+begin_src emacs-lisp
      (defun yas/org-very-safe-expand ()
        (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))

      (defun yas/org-setup ()
        ;; yasnippet (using the new org-cycle hooks)
        (make-variable-buffer-local 'yas/trigger-key)
        (setq yas/trigger-key [tab])
        (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
        (define-key yas/keymap [tab] 'yas/next-field))

      ;; See https://github.com/eschulte/emacs24-starter-kit/issues/80.
      (setq org-src-tab-acts-natively nil)

      (add-hook 'org-mode-hook #'yas/org-setup)
    #+end_src

** cmake mode
     - 安装CMake Mode包：
     #+BEGIN_SRC emacs-lisp
       (use-package cmake-mode
         :ensure t
         :defer t
         )
     #+END_SRC

     - 基本配置
       #+BEGIN_SRC emacs-lisp
         (require 'cmake-mode)
           (setq auto-mode-alist
                 (append '(("CMakeLists\\.txt\\'" . cmake-mode)
                           ("\\.cmake\\'" . cmake-mode))
                         auto-mode-alist))
       #+END_SRC

     - [[https://github.com/alamaison/emacs-cmake-project][CMake Project]] 
       A minor-mode integrating the CMake build process with the Emacs
       ecosystem.
       1. 基本配置
          #+BEGIN_SRC emacs-lisp
            (use-package cmake-project
              :ensure t
              :defer t)
            (require 'cmake-project)
            (defun maybe-cmake-project-hook ()
              (if (file-exists-p "CMakeLists.txt") (cmake-project-mode)))
            (add-hook 'c-mode-hook 'maybe-cmake-project-hook)
            (add-hook 'c++-mode-hook 'maybe-cmake-project-hook)
          #+END_SRC

       2. 基本用法
          - Use =M-x cmake-project-configure-project= to configure or
            reconfigure a CMake build tree.

          - This mode makes the compile command, =M-x compile=, build
            the project by default via CMake in a =bin= subdirectory of
            the project source root directory.

** Web
*** Javascript
    #+BEGIN_SRC emacs-lisp
      (use-package js2-mode
        :ensure t
        :defer t)
      (require 'js2-mode)
      (add-to-list 'auto-mode-alist '("\\.js[x]?\\'" . js2-mode))
    #+END_SRC

*** JSON
    #+BEGIN_SRC emacs-lisp
    
      (add-to-list 'auto-mode-alist '("\\.json\\'\\|\\.jshintrc\\'" . js-mode))

      (setq js-indent-level 2)
    #+END_SRC

*** CSS
    #+BEGIN_SRC emacs-lisp
      ;(use-package rainbow-mode
       ; :ensure t
        ;:defer t)
      (add-hook 'css-mode-hook
                'rainbow-mode)
    #+END_SRC

* editor
** Undo tree mode - visualize your undos and branches
     People often struggle with the Emacs undo model, where there’s
     really no concept of “redo” - you simply undo the undo. # This
     lets you use =C-x u (undo-tree-visualize)= to visually walk through
     the changes you’ve made, undo back to a certain point (or redo),
     and go down different branches.

     #+BEGIN_SRC emacs-lisp
       (use-package undo-tree
         :defer t
         :ensure t
         :diminish undo-tree-mode
         :config
         (progn
           (global-undo-tree-mode)
           (setq undo-tree-visualizer-timestamps t)
           (setq undo-tree-visualizer-diff t)))
     #+END_SRC
** electric pair mode  
Electric Pair mode is a global minor mode. When enabled, typing an
open parenthesis automatically inserts the corresponding closing
parenthesis. 

#+BEGIN_SRC emacs-lisp
  (fyj/package-install-if-needed 'unfill)

  (when (fboundp 'electric-pair-mode)
    (electric-pair-mode 1))

  (when (eval-when-compile (version< "24.4" emacs-version))
    (electric-indent-mode 1))
#+END_SRC
** Recent files

     #+BEGIN_SRC emacs-lisp
       (require 'recentf)
       (setq recentf-max-saved-items 200
             recentf-max-menu-items 15)
       (recentf-mode)
     #+END_SRC
** Markdown Mode
   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :ensure t
       :defer t)
     (after-load 'whitespace-cleanup-mode
       (push 'markdown-mode whitespace-cleanup-mode-ignore-modes))

   #+END_SRC
* Version Control


** Magit Mode
   Magit模式是emacs下的一个非常好用的git操作界面。
*** 安装 (注：只支持emacs 24.4之后的版本)
    #+BEGIN_SRC emacs-lisp
      (when (version<= "24.4" emacs-version)
           (fyj/package-install-if-needed 'magit))
    #+END_SRC

*** 基本操作指南

    1. 查看项目状态
       #+BEGIN_SRC sh
       magit-status
       #+END_SRC

    2. 查看差异

       使用Tab键可以调用diff查看差异（magit-section-toggle）

    3. 常用的几个命令
       - magit-stage  Press [s] to add file unser cursor to stage.

       - magit-stage-modified  Press [S] to add all tracked files to stage.

       - magit-unstage  Press [u] to unstage the file under cursor.

       - magit-reset-index  press [U] to unstage all staged files.

       - Press [c c ] to write a commit message, then [C - c C -c ] to
         commit.

    4. git push

       press [P P] to push. (magit-push-pop)

    5. git pull

       press [F F] to pull. (magit-pull-popup)

    6. git log

       call magit-log to see your commit log. Press Enter on a a line
       to see its diff.


