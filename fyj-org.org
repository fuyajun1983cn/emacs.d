#+TITLE: Org Settings
#+OPTIONS: toc:nil num:nil ^:nil

* Org Mode
** General Settings 
   #+BEGIN_SRC emacs-lisp
     ;; General Settings
     (if *is-in-windows*
         (setq org-directory "E:/mysoft/my-program-wharehouse/org/")
       (setq org-directory "~/org/"))
     (setq org-default-notes-file (concat org-directory "someday.org"))

     (setq org-fast-tag-selection-single-key nil)
     (setq org-refile-targets (quote (("gtd.org":level . 1) ("gtd_archive.org":maxlevel . 2) )))
     (setq org-reverse-note-order nil)
     (setq org-tags-column -78)
     (setq org-tags-match-list-sublevels nil)
     ;; org-time-stamp-rounding-minutes 必须是一个list对象
     (setq org-time-stamp-rounding-minutes '(5 0))
     (setq org-use-fast-todo-selection t)
     (setq org-use-tag-inheritance nil)
     (setq org-deadline-warning-days 7)
     (setq org-insert-mode-line-in-empty-file t)

     ;;auto fill mode
     (add-hook 'org-mode-hook 'auto-fill-mode)

     (setq org-log-done 'time)
                                             ;  (setq org-log-done 'note)

      (setq org-list-demote-modify-bullet
            '(("+" . "-") ("-" . "+") ("*" . "+")))

   #+END_SRC
** tags
   #+BEGIN_SRC emacs-lisp
      ;;TAGS
       (setq org-tag-alist (quote (("EMACS" . ?e)
                                   ("WIFI" . ?w)
                                   ("BUG" . ?b)
                                   ("ME" . ?m)
                                   ("STUDY" . ?s))))   
   #+END_SRC
** todo
   #+BEGIN_SRC emacs-lisp
         ;;TODO keywords
         (setq org-todo-keywords
               '((sequence "TODO(t)" "WAITING(w)" "STARTED(s)" "|" "DONE(d)" "CANCELED(c)")
                 (sequence "Submitted" "Assigned" "Working" "|" "Resolved")))   
   #+END_SRC
** Editing source code in current window
   #+BEGIN_SRC emacs-lisp
     (setq org-src-window-setup 'current-window)   
   #+END_SRC
** org-toc 
    table of contents in a separate buffer
    #+BEGIN_SRC emacs-lisp
      (require 'org-toc)
      (setq org-toc-default-depth 3)
    #+END_SRC

** Org-Mode Hook -- Org模式下的通用按键设定
   :PROPERTIES:
   :CUSTOM_ID: keybindings
   :END:
   #+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key "\M-\C-n" 'outline-next-visible-heading)
              (local-set-key "\M-\C-p" 'outline-previous-visible-heading)
              (local-set-key "\M-\C-u" 'outline-up-heading)
              ;; table
              (local-set-key "\M-\C-w" 'org-table-copy-region)
              (local-set-key "\M-\C-y" 'org-table-paste-rectangle)
              (local-set-key "\M-\C-l" 'org-table-sort-lines)
              ;; display images
              (local-set-key "\M-I" 'org-toggle-inline-images)))
   #+end_src

** Speed keys
   :PROPERTIES:
   :CUSTOM_ID: speed-keys
   :END:
   Speed commands enable single-letter commands in Org-mode files when
   the point is at the beginning of a headline, or at the beginning of a
   code block.
   
   See the `=org-speed-commands-default=' variable for a list of the keys
   and commands enabled at the beginning of headlines.  All code blocks
   are available at the beginning of a code block, the following key
   sequence =C-c C-v h= (bound to `=org-babel-describe-bindings=') will
   display a list of the code blocks commands and their related keys.
   
   #+begin_src emacs-lisp
  (setq org-use-speed-commands t)
   #+end_src

** Code blocks
   :PROPERTIES:
   :CUSTOM_ID: babel
   :END:
   This activates a number of widely used languages, you are encouraged
   to activate more languages using the customize interface for the
   `=org-babel-load-languages=' variable, or with an elisp form like the
   one below.  The customize interface of `=org-babel-load-languages='
   contains an up to date list of the currently supported languages.
   #+begin_src emacs-lisp 
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
        (python . t)
        (plantuml . t)
        (ditaa . t)
        (lua . t)
        (sh . t)))
   #+end_src
   
   You are encouraged to add the following to your personal configuration
   although it is not added by default as a security precaution.
   执行代码时，不显示确认信息。
   #+begin_src emacs-lisp 
  (setq org-confirm-babel-evaluate nil)
   #+end_src

*** org-babel使用杂记

    =org-babel= 是org-mode 的一部分,用来管理org文档中的源码,org-babel支
    持多种语言。

    =org-babel= 可以在org文档中插入代码,并且会帮你语法高亮插入的代码,而
    且可以执行你插入的代码,捕获输出,插入到你代码的下面。

    #+BEGIN_SRC sh :exports both :results output
        echo ";;This is a Test"
    #+END_SRC

    #+RESULTS:
    : ;;This is a Test

    #+RESULTS

    导出时不执行代码：  

    #+BEGIN_SRC sh  :exports both :results output :eval no-export
       echo ";;This is a Test"
    #+END_SRC

** Code block fontification
   :PROPERTIES:
   :CUSTOM_ID: code-block-fontification
   :END:
   The following displays the contents of code blocks in Org-mode files
   using the major-mode of the code.  It also changes the behavior of
   =TAB= to as if it were used in the appropriate major mode.  This means
   that reading and editing code form inside of your Org-mode files is
   much more like reading and editing of code using its major mode.
   #+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
   #+end_src

** Org Agenda
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-settings
   :END:
   #+BEGIN_SRC emacs-lisp
     ;; Org-Agenda
     (global-set-key "\C-ca" 'org-agenda)
     (setq org-agenda-files (quote ("~/org/gtd.org" "~/org/personal.org")))
     (setq org-agenda-span 'week)
     (setq org-deadline-warning-days 7)
     (setq org-agenda-repeating-timestamp-show-all nil)
     (setq org-agenda-restore-windows-after-quit t)
     (setq org-agenda-show-all-dates t)
     (setq org-agenda-skip-deadline-if-done t)
     (setq org-agenda-sorting-strategy (quote ((agenda time-up priority-down tag-up) (todo tag-up))))
     (setq org-agenda-start-on-weekday nil)
     (setq org-agenda-todo-ignore-deadlines t)
     (setq org-agenda-todo-ignore-scheduled t)
     (setq org-agenda-todo-ignore-with-date t)
     (setq org-agenda-window-setup (quote other-window))
     (setq org-agenda-include-diary nil)
     (add-hook 'org-agenda-mode-hook 'hl-line-mode)

     (setq org-agenda-custom-commands
           '(

             ("p" "projects"   
              ((tags "project")))

             ("h" "office and home lists"
              ((agenda)
               (tags-todo "office")
               (tags-todo "home")
               (tags-todo "computer")
               (tags-todo "reading")))

             ("d" "daily action list"
              (
               (agenda "" ((org-agenda-ndays 1)
                           (org-agenda-sorting-strategy
                            (quote ((agenda time-up priority-down tag-up) )))
                           (org-deadline-warning-days 0)
                           ))))
             )
           )

     (defun gtd ()
       (interactive)
       (find-file  (concat org-directory "gtd.org"))
       )

     (global-set-key (kbd "C-c g") 'gtd)


   #+END_SRC
** Org Capture
   :PROPERTIES:
   :CUSTOM_ID: org-capture-settings
   :END:
   #+BEGIN_SRC emacs-lisp
       (global-set-key "\C-cc" 'org-capture)
     ;;
     ;;
       (setq org-capture-templates
             (quote (
                     ("t" "Todo" entry (file+headline "gtd.org" "Tasks")  
                      "* ☛ TODO %^{Brief Description}  %^g\n%?\nAdded: %U")
                     ("j" "Journal" entry (file+datetree "journal.org")  ;; Things That I have done
                      "* %?\nEntered on %U\n %i\n %a")
                     ("c" "Contact" entry (file+headline "personal.org" "Contacts") ;; contacts info
                      "\n* %^{Name} :CONTACT:\n%[contemp.txt]\n")
                     ("s" "Someday" entry (file+headline "someday.org" "Tasks") ;;Things That I may consider  to do. 
                      "* ☛ TODO %^{Brief Description}  %^g\n%?\nAdded: %U")
                     )))

   #+END_SRC
   
** Org Links
   :PROPERTIES:
   :CUSTOM_ID: org-links-settings
   :END:
   #+BEGIN_SRC emacs-lisp
  ;; Org-link
  (global-set-key "\C-cl" 'org-store-link)
  (add-hook 'org-load-hook
    (lambda ()
      (define-key org-mode-map "\C-n" 'org-next-link)
      (define-key org-mode-map "\C-p" 'org-previous-link)))


   #+END_SRC

** Org publish
   :PROPERTIES:
   :CUSTOM_ID: org-publish-settings
   :END:

   - configuring org html export

     Jekyll负责生成最终网页，这里会设置导出html网页时，只导出<body>标
     签之间的内容。

     #+BEGIN_SRC emacs-lisp
       (require 'ox-publish)
;       (setq post-dir "~/MyPlayground/my-program-wharehouse/blog/")
;       (setq draft-dir "~/org/draft/")
       (setq org-publish-project-alist
             '(
     #+END_SRC

   - 配置项说明     

     - base-directory - 你存放笔记的目录（想将哪里的org文件导出成HTML）
     - base-extension - 导出的文件格式
     - publishing-directory - 导出HTML的目标目录
     - recursive - 设置为t会将子目录中的文件也导出
     - publishing-function - 使用哪个函数来进行publish
     - auto-sitemap - 自动生存sitemap
     - sitemap-sort-files - 我这里采用的是按照从新到旧的排列方式
     - sitemap-file-entry-format - 这里采用时间+标题的方式生成sitemap

     #+BEGIN_SRC emacs-lisp
       ("org-blog-posts"
               ;; Path to your org files.
               :base-directory "e:/documents/wifi/code/notes/"
               :base-extension "org"

               ;; Path to your Jekyll project.
               :publishing-directory "e:/documents/blog/_posts/2015/" 
               :recursive t
               :publishing-function org-html-publish-to-html
               :headline-levels 4 
               :html-extension "html"
               :time-stamp-file t
               :body-only t ;; Only export section between <body> </body>
       ;        :auto-sitemap t                ; Generate sitemap.org automagically...
       ;        :sitemap-filename "sitemap.org"  ; ... call it sitemap.org (it's the default)...
       ;        :sitemap-title "Sitemap"         ; ... with title 'Sitemap'.
       ;        :sitemap-sort-files anti-chronologically
       ;        :sitemap-file-entry-format "%d %t"
         )


     #+END_SRC

   - 对于图片，PDF，CSS等,只需要原样拷贝即可。 

     #+BEGIN_SRC emacs-lisp
        ;;just copy files from :base-directory to :publishing-directory
        ("org-blog-static"
         :base-directory "e:/documents/wifi/code/notes/images/"
         :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
         :publishing-directory "e:/documents/blog/images/2015/" 
         :recursive t
         :publishing-function org-publish-attachment)

     #+END_SRC

   - 定义发布任务  

     #+BEGIN_SRC emacs-lisp

           ("blog" :components ("org-blog-posts" "org-blog-static"))

       ))
     #+END_SRC

** org-bullets

     #+BEGIN_SRC emacs-lisp
       (use-package org-bullets
         :ensure t
         :config
         (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
     #+END_SRC
   - Fancy Todo States:
     #+BEGIN_SRC emacs-lisp
       (setq org-todo-keywords '((sequence "☛ TODO(t)" "|" "✔ DONE(d)")
       (sequence "⚑ WAITING(w)" "|")
       (sequence "|" "✘ CANCELED(c)")))     
     #+END_SRC

** Pomodoro(蕃茄工作法)

   - Activate the org-timer module :
     #+BEGIN_SRC emacs-lisp
       (add-to-list 'org-modules 'org-timer)
     #+END_SRC

   - Set a default value for the timer
     #+BEGIN_SRC emacs-lisp
       (setq org-timer-default-timer 25)
     #+END_SRC

   - Modify the org-clock-in so that a timer is started with the
     default value except if a timer is already started :
     #+BEGIN_SRC emacs-lisp
       (add-hook 'org-clock-in-hook (lambda ()
             (if (not org-timer-default-timer) 
             (org-timer-set-timer '(16)))))
     #+END_SRC

** Ditaa

   Ditaa is a command-line utility that converts diagrams drawn using
   ASCII art into bitmap graphics.
   

** [[https://github.com/howardabrams/demo-it][demoit]]

*** org-tree-slide-mode

    #+BEGIN_SRC emacs-lisp
      (fyj/package-install-if-needed 'org-tree-slide)
    #+END_SRC

    key binding:
    #+BEGIN_SRC emacs-lisp
      (define-key org-mode-map (kbd "<f8>") 'org-tree-slide-mode)
      (define-key org-mode-map (kbd "S-<f8>") 'org-tree-slide-skip-done-toggle)
    #+END_SRC

*** expand-region

    #+BEGIN_SRC emacs-lisp
      (fyj/package-install-if-needed 'expand-region)
    #+END_SRC

    key binding:
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-=") 'er/expand-region)
    #+END_SRC

*** fancy-narrow

    #+BEGIN_SRC emacs-lisp
      (fyj/package-install-if-needed 'fancy-narrow)
    #+END_SRC

