#+TITLE:  全局相关设置
#+AUTHOR: 付亚军
#+EMAIL:  fuyajun1983cn@163.com

* 全局行为设置
** 退出Emacs前提示确认
     #+BEGIN_SRC emacs-lisp
       (fset 'yes-or-no-p 'y-or-n-p)
       ;; ask me when I quit emacs
       (set-variable 'confirm-kill-emacs 'yes-or-no-p)
     #+END_SRC
** exec_path设置
*** Windows

   #+BEGIN_SRC emacs-lisp
     (if *is-in-windows*
         (progn 
           (setq mypaths '(
                     "C:/Windows/system32/"
                     "C:/Windows/"
                     "E:/cygwin/usr/local/bin" 
                     "E:/cygwin/usr/bin" 
                     "E:/cygwin/bin" 
                     "E:/android4.4/adt-bundle-windows-x86-20131030/sdk/platform-tools"
                     ))
            (setenv "PATH" (mapconcat 'identity mypaths ";") )
            (setq exec-path (append mypaths (list "." exec-directory)) )))
        
   #+END_SRC

** 正则表达式后端默认值
     #+BEGIN_SRC emacs-lisp
       (setq-default regex-tool-backend 'perl)
     #+END_SRC
** 设置打开文件时的缺省路径
     #+BEGIN_SRC emacs-lisp
       (setq default-directory "~/")
     #+END_SRC
** 备份
*** 设定不产生备份文件
      #+BEGIN_SRC emacs-lisp
        (setq make-backup-files nil)
        (setq-default make-backup-files nil)
      #+END_SRC
*** 转储自动保存的文件
    #+BEGIN_SRC emacs-lisp
      (setq auto-save-dir (expand-file-name "auto-save-list/" fyj/emacs-directory))
      (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
    #+END_SRC
*** Don't clutter up directories with files~
    Rather than saving backup files scattered all over the file
    system, let them live in the =backups/= directory inside of the starter kit.
    #+begin_src emacs-lisp :tangle no
       (setq backup-directory-alist `(("." . ,(expand-file-name
                                          (concat fyj/emacs-directory "backups")))))
    #+end_src

** 设置个人信息
     #+BEGIN_SRC emacs-lisp
       (setq user-full-name "Fu Yajun")
       (setq user-mail-address "fuyajun1983cn@163.com")
     #+END_SRC
** 默认使用ibuffer
      #+BEGIN_SRC emacs-lisp
        (defalias 'list-buffers 'ibuffer) ; make ibuffer default
      #+END_SRC
** 行号
*** 设置行号显示格式
      #+BEGIN_SRC emacs-lisp
        (global-linum-mode 1)
        ;;设置显示行号的宽度
        (setq linum-format "%4d ")
      #+END_SRC
*** 相对行号显示
    https://github.com/coldnew/linum-relative.git
      #+BEGIN_SRC emacs-lisp
        (use-package linum-relative
          :ensure nil
          :defer t)
        (require 'linum-relative)
      #+END_SRC
*** 固定行号显示高度
    #+BEGIN_SRC emacs-lisp
      (set-face-attribute 'linum nil :height 100)
    #+END_SRC
** 高亮显示当前行
     #+BEGIN_SRC emacs-lisp
   (global-hl-line-mode 1)    
     #+END_SRC
** 设置语言和编码环境
    #+BEGIN_SRC emacs-lisp
      (set-language-environment "UTF-8")
      (set-default-coding-systems 'utf-8)
      ;(set-buffer-file-coding-system 'utf-8)
      ;(set-file-name-coding-system 'utf-8)
      (setq locale-coding-system 'utf-8)
      (set-terminal-coding-system 'utf-8)
      (set-keyboard-coding-system 'utf-8)
      (unless (or (eq system-type 'windows-nt) (eq system-type 'cygwin)) (set-selection-coding-system 'utf-8))
      (prefer-coding-system 'utf-8)
      (when (display-graphic-p)
        (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))

    #+END_SRC
** Color Themes
Emacs24 has build in support for saving and loading themes.

A Theme builder is available at http://elpa.gnu.org/themes/ along with
a list of pre-built themes at http://elpa.gnu.org/themes/view.html and
themes are available through ELPA.

Downloaded themes may be saved to the =themes/= directory in the base
of the starter kit which ignored by git.  Once downloaded and
evaluated a theme is activated using the =load-theme= function.

#+BEGIN_SRC emacs-lisp
  (when window-system
    (require 'powerline) 
    (powerline-default-theme)

    (require 'airline-themes)
    (load-theme 'airline-dark t)

    (add-to-list 'custom-theme-load-path (expand-file-name "src/emacs-theme-gruvbox" fyj/emacs-directory))
    (load-theme 'gruvbox t))
#+END_SRC

  终端模式下使用另外的主题
  #+BEGIN_SRC emacs-lisp 
    (when (not (window-system))
     (load-theme 'wombat)
     
     (add-to-list 'custom-theme-load-path (expand-file-name "src/emacs-color-theme-solarized" fyj/emacs-directory))
     (load-theme 'solarized t)

     (add-hook 'after-make-frame-functions
               (lambda (frame)
                 (let ((mode 'dark))
                   (set-frame-parameter frame 'background-mode mode)
                   (set-terminal-parameter frame 'background-mode mode))
                 (enable-theme 'solarized))))
  #+END_SRC

** Window systems
#+srcname: fyj-window-view-stuff
#+begin_src emacs-lisp 
  (when window-system
    (setq frame-title-format '(buffer-file-name "%f" ("%b")))
    (blink-cursor-mode -1)
    (when (require 'mwheel nil 'no-error) (mouse-wheel-mode t)))
  
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  
  (setq visible-bell t
        echo-keystrokes 0.1
        font-lock-maximum-decoration t
        inhibit-startup-message t
        transient-mark-mode t
        color-theme-is-global t
        delete-by-moving-to-trash t
        shift-select-mode nil
        truncate-partial-width-windows nil
        uniquify-buffer-name-style 'forward
        whitespace-style '(trailing lines space-before-tab
                                    indentation space-after-tab)
        whitespace-line-column 100
        ediff-window-setup-function 'ediff-setup-windows-plain
        oddmuse-directory (concat fyj-dir "oddmuse")
        xterm-mouse-mode t
        save-place-file (concat fyj-dir "places"))
#+end_src
   
*** 关闭一些GUI特征
#+BEGIN_SRC emacs-lisp
  ;;----------------------------------------------------------------------------
  ;; Suppress GUI features
  ;;----------------------------------------------------------------------------
  (when window-system
    (setq use-file-dialog nil)
    (setq use-dialog-box nil)
    (setq inhibit-startup-screen t)
    (setq inhibit-startup-echo-area-message t))

#+END_SRC
   
*** 常用的一些行为设置  
#+BEGIN_SRC emacs-lisp
  ;;----------------------------------------------------------------------------
  ;; Show a marker in the left fringe for lines not in the buffer
  ;;----------------------------------------------------------------------------
  (setq indicate-empty-lines t)


  ;;----------------------------------------------------------------------------
  ;; Window size and features
  ;;----------------------------------------------------------------------------
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (fboundp 'set-scroll-bar-mode)
    (set-scroll-bar-mode nil))

  (let ((no-border '(internal-border-width . 0)))
    (add-to-list 'default-frame-alist no-border)
    (add-to-list 'initial-frame-alist no-border))

  (defun sanityinc/adjust-opacity (frame incr)
    "Adjust the background opacity of FRAME by increment INCR."
    (unless (display-graphic-p frame)
      (error "Cannot adjust opacity of this frame"))
    (let* ((oldalpha (or (frame-parameter frame 'alpha) 100))
           ;; The 'alpha frame param became a pair at some point in
           ;; emacs 24.x, e.g. (100 100)
           (oldalpha (if (listp oldalpha) (car oldalpha) oldalpha))
           (newalpha (+ incr oldalpha)))
      (when (and (<= frame-alpha-lower-limit newalpha) (>= 100 newalpha))
        (modify-frame-parameters frame (list (cons 'alpha newalpha))))))

  ;; TODO: use seethru package instead?
  (global-set-key (kbd "M-C-8") (lambda () (interactive) (sanityinc/adjust-opacity nil -2)))
  (global-set-key (kbd "M-C-9") (lambda () (interactive) (sanityinc/adjust-opacity nil 2)))
  (global-set-key (kbd "M-C-0") (lambda () (interactive) (modify-frame-parameters nil `((alpha . 100)))))

  (add-hook 'after-make-frame-functions
            (lambda (frame)
              (with-selected-frame frame
                (unless window-system
                  (set-frame-parameter nil 'menu-bar-lines 0)))))

  (setq frame-title-format
        '((:eval (if (buffer-file-name)
                     (abbreviate-file-name (buffer-file-name))
                   "%b"))))

  ;; Non-zero values for `line-spacing' can mess up ansi-term and co,
  ;; so we zero it explicitly in those cases.
  (add-hook 'term-mode-hook
            (lambda ()
              (setq line-spacing 0)))

#+END_SRC

** 终端设置
    #+BEGIN_SRC emacs-lisp
      (when (not (window-system))
        (menu-bar-mode -1))
    #+END_SRC
    - Make mouse clicks work in xterm (and iTerm).
      #+BEGIN_SRC emacs-lisp
        (when (not (window-system))
          (xterm-mouse-mode +1))
      #+END_SRC

*** 终端下访问剪帖板
    确保系统安装了xsel
    #+BEGIN_SRC sh
    sudo apt-get install xsel
    #+END_SRC
    然后，进行如下设定：
    #+BEGIN_SRC emacs-lisp
      (setq x-select-enable-clipboard t) 

      (unless window-system 
       (when (getenv "DISPLAY") 
         ;; Callback for when user cuts 
         (defun xsel-cut-function (text &optional push) 
           ;; Insert text to temp-buffer, and "send" content to xsel stdin 
           (with-temp-buffer 
             (insert text) 
             ;; I prefer using the "clipboard" selection (the one the 
             ;; typically is used by c-c/c-v) before the primary selection 
             ;; (that uses mouse-select/middle-button-click) 
             (call-process-region (point-min) (point-max) "xsel" nil 0 nil "--clipboard" "--input"))) 
         ;; Call back for when user pastes 
         (defun xsel-paste-function() 
           ;; Find out what is current selection by xsel. If it is different 
           ;; from the top of the kill-ring (car kill-ring), then return 
           ;; it. Else, nil is returned, so whatever is in the top of the 
           ;; kill-ring will be used. 
           (let ((xsel-output (shell-command-to-string "xsel --clipboard --output"))) 
             (unless (string= (car kill-ring) xsel-output) 
               xsel-output))) 
         ;; Attach callbacks to hooks 
         (setq interprogram-cut-function 'xsel-cut-function) 
         (setq interprogram-paste-function 'xsel-paste-function))) 

    #+END_SRC
    
** modeline设置
*** 在modeline显示当前时间
     #+BEGIN_SRC emacs-lisp
       (setq display-time-24hr-format t)
       (display-time-mode +1)
     #+END_SRC
*** Mode line format
     紧凑的形式
     #+BEGIN_SRC emacs-lisp
       (use-package smart-mode-line
         :ensure t
         :defer t)
     #+END_SRC
** bookmark
*** 设置书签文件

    #+BEGIN_SRC emacs-lisp :tangle no
      (setq bookmark-default-file (concat fyj/emacs-directory "bookmarks"))
    #+END_SRC
*** Starting Emacs with Bookmark
    启动Emacs时，显示当前书签的内容

    #+BEGIN_SRC emacs-lisp :tangle no
      (require 'bookmark)
      (bookmark-bmenu-list)
      (switch-to-buffer "*Bookmark List*")
    #+END_SRC
** Highlight matching parentheses when the point is on them.
#+srcname: fyj-match-parens
#+begin_src emacs-lisp 
(show-paren-mode 1)
#+end_src

** Scale Font size
#+begin_src emacs-lisp 
  ;;(define-key global-map (kbd "C-+") 'text-scale-increase)
  ;;(define-key global-map (kbd "C--") 'text-scale-decrease)
  ;;
  ;;放大字体: Ctrl-x Ctrl-+ 或 Ctrl-x Ctrl-=
  ;;缩小字体: Ctrl-x Ctrl–
  ;;重置字体: Ctrl-x Ctrl-0
  (if (or *is-in-windows* *is-in-cygwin*)
      (progn
          ;; For Windows
         (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
         (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease))
  (progn
    ;; For Linux
    (global-set-key (kbd "<C-mouse-4>") 'text-scale-increase)
    (global-set-key (kbd "<C-mouse-5>") 'text-scale-decrease)))

#+end_src
** 将删除的文件移动到回收站

   #+BEGIN_SRC emacs-lisp
     (setq delete-by-moving-to-trash t)
   #+END_SRC
** Apropos sort results by relevancy
   #+BEGIN_SRC emacs-lisp
     (setq apropos-sort-by-scores t)
   #+END_SRC
* 全局按键设置
** You know, like Readline.
#+begin_src emacs-lisp 
(global-set-key (kbd "C-M-h") 'backward-kill-word)
#+end_src

** Align your code in a pretty way.
#+begin_src emacs-lisp 
(global-set-key (kbd "C-x \\") 'align-regexp)
#+end_src

** Commandspletion that uses many different methods to find options.
#+begin_src emacs-lisp 
(global-set-key (kbd "M-/") 'hippie-expand)
#+end_src

** Turn on the menu bar for exploring new modes
#+begin_src emacs-lisp 
(global-set-key [f1] 'menu-bar-mode)
#+end_src

** Use regex searches by default.
#+begin_src emacs-lisp 
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "\C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)
#+end_src

** File finding
#+begin_src emacs-lisp 
  (global-set-key (kbd "C-x M-f") 'ido-find-file-other-window)
  (global-set-key (kbd "C-x C-p") 'find-file-at-point)
  (global-set-key (kbd "C-c y") 'bury-buffer)
  (global-set-key (kbd "C-c r") 'revert-buffer)
  (global-set-key (kbd "M-`") 'file-cache-minibuffer-complete)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "C-x f") 'recentf-ido-find-file)  
#+end_src

** Indentation help
#+begin_src emacs-lisp 
(global-set-key (kbd "C-x ^") 'join-line)
#+end_src

** If you want to be able to M-x without meta
#+begin_src emacs-lisp 
(global-set-key (kbd "C-x C-m") 'execute-extended-command)
#+end_src

** Help should search more than just commands
#+begin_src emacs-lisp 
  (global-set-key (kbd "C-h a") 'apropos)
#+end_src

** Activate occur easily inside isearch
#+begin_src emacs-lisp 
  (define-key isearch-mode-map (kbd "C-o")
    (lambda () (interactive)
      (let ((case-fold-search isearch-case-fold-search))
        (occur (if isearch-regexp
                   isearch-string
                 (regexp-quote isearch-string))))))
#+end_src

** Rgrep
Rgrep is infinitely useful in multi-file projects.

(see [[elisp:(describqe-function%20'rgrep)][elisp:(describqe-function 'rgrep)]])

#+begin_src emacs-lisp
  (define-key global-map "\C-x\C-r" 'rgrep)
#+end_src

* 全局实用函数
** 定义after-load函数
#+BEGIN_SRC emacs-lisp
  (if (fboundp 'with-eval-after-load)
      (defalias 'after-load 'with-eval-after-load)
    (defmacro after-load (feature &rest body)
      "After FEATURE is loaded, evaluate BODY."
      (declare (indent defun))
      `(eval-after-load ,feature
         '(progn ,@body))))

#+END_SRC
** 删除当前文件 
#+BEGIN_SRC emacs-lisp
  ;;----------------------------------------------------------------------------
  ;; Delete the current file
  ;;----------------------------------------------------------------------------
  (defun delete-this-file ()
    "Delete the current file, and kill the buffer."
    (interactive)
    (or (buffer-file-name) (error "No file is currently being edited"))
    (when (yes-or-no-p (format "Really delete '%s'?"
                               (file-name-nondirectory buffer-file-name)))
      (delete-file (buffer-file-name))
      (kill-this-buffer)))

#+END_SRC
   
** 重命名当前文件 
#+BEGIN_SRC emacs-lisp
  ;;----------------------------------------------------------------------------
  ;; Rename the current file
  ;;----------------------------------------------------------------------------
  (defun rename-this-file-and-buffer (new-name)
    "Renames both current buffer and file it's visiting to NEW-NAME."
    (interactive "sNew name: ")
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (unless filename
        (error "Buffer '%s' is not visiting a file!" name))
      (if (get-buffer new-name)
          (message "A buffer named '%s' already exists!" new-name)
        (progn
          (when (file-exists-p filename)
           (rename-file filename new-name 1))
          (rename-buffer new-name)
          (set-visited-file-name new-name)))))


#+END_SRC
   
** 浏览当前的HTML文件  
#+BEGIN_SRC emacs-lisp
  ;;----------------------------------------------------------------------------
  ;; Browse current HTML file
  ;;----------------------------------------------------------------------------
  (defun browse-current-file ()
    "Open the current file as a URL using `browse-url'."
    (interactive)
    (let ((file-name (buffer-file-name)))
      (if (tramp-tramp-file-p file-name)
          (error "Cannot open tramp file")
        (browse-url (concat "file://" file-name)))))


#+END_SRC
   
** 通过外部程序打开文件  
#+BEGIN_SRC emacs-lisp
  ;;-------------------------------------------------------------
  ;;Open file in External App
  ;;-------------------------------------------------------------
  (defun xah-open-in-external-app()
    "Open the current file or dired marked files in texternal app.
  this app is chosen from your OS's preference"
    (interactive)
    (let* (
           (file-list
            (if (string-equal major-mode "dired-mode")
                (dired-get-marked-files)
              (list (buffer-file-name))))
           (do-it-p (if (<= (length file-list) 5)
                        t
                      (y-or-n-p "Open more than 5 files? ")))
           )
      (when do-it-p
        (cond
         ((string-equal system-type "windows-nt")
          (mapc
           (lambda (fPath)
             (w32-shell-execute "open" (replace-regexp-in-string "/" "\\" fPath t t))) file-list))
         ((string-equal system-type "gnu/linux")
          (mapc
           (lambda (fPath) (let ((process-connection-type nil)) (start-process " " nil "xdg-open" fPath))) file-list)))))
    )
  ;;set a short key for it
  (global-set-key (kbd "<C-f5>") 'xah-open-in-external-app)

#+END_SRC
** 在shell中执行git clone命令

   在emacs-lisp中执行git clone命令，下载第三方扩展库：

   #+BEGIN_SRC emacs-lisp
     (defun git-clone(source dest)
       "download source code from source to dest"
       (interactive)
       (if (and (stringp source) (stringp dest))
           (unless (file-exists-p dest)
             (shell-command (format "git clone %s %ssrc/%s" source fyj-dir dest)))))
   #+END_SRC
** 选择一个word或当前行
     - 选中光标所有的word
       #+BEGIN_SRC emacs-lisp
         (transient-mark-mode 1)

         (defun select-current-word ()
           "Select the word under cursor. "
           (interactive)
           (let (pt)
             (skip-chars-backward "-_A-Za-z0-9")
             (setq pt (point))
             (skip-chars-forward "-_A-Za-z0-z")
             (set-mark pt)))
       #+END_SRC

     - 选中当前光标所在的行
       #+BEGIN_SRC emacs-lisp
         (transient-mark-mode 1)
         (defun select-current-line ()
           "Select the current line under cursor."
           (interactive)
           (end-of-line)
           (set-mark (line-beginning-position)))
       #+END_SRC

     - 快捷键设置
       #+BEGIN_SRC emacs-lisp
         (global-set-key (kbd "C-c fw") 'select-current-word)
         (global-set-key (kbd "C-c fl") 'select-current-line)
       #+END_SRC
** 转换Window路径为URI
   #+BEGIN_SRC emacs-lisp
     (defun winpath2uri (path &optional from to)
       "
          将一个Windows文件路径转换为一个
          通用的URI路径，
         如： 转换前的路径为：e:\test.org
         转换后，路径为： file:///e:/test.org
       "
       (interactive
        (if (use-region-p)
            (list nil (region-beginning) (region-end))
          (let ((bds (bounds-of-thing-at-point 'line)))
            (list nil (car bds) (cdr bds)))
          ))
       (let (workOnStringP inputStr outputStr)
         (setq workOnStringP (if path t nil))
         (setq inputStr (if workOnStringP path (buffer-substring-no-properties from to)))
         (setq outputStr
               (replace-regexp-in-string "\\\\" "/" inputStr))
         (if workOnStringP
             outputStr
           (save-excursion
             (delete-region from to)
             (goto-char from)
             (insert "file:///")
             (insert outputStr)))))

   #+END_SRC
** Unix与DOS换行符相互转换
   #+BEGIN_SRC emacs-lisp
     (defun dos-unix () (interactive) 
        (goto-char (point-min)) 
        (while (search-forward "\r" nil t) (replace-match ""))) 
     (defun unix-dos () (interactive) 
        (goto-char (point-min)) 
        (while (search-forward "\n" nil t) (replace-match "\r\n")))    
   #+END_SRC
* 全局钩子设置
* 全局Registers设置
Registers allow you to jump to a file or other location quickly. Use
=C-x r j= followed by the letter of the register (i for =init.el=, r
for this file) to jump to it.

You should add registers here for the files you edit most often.

#+name: fyj-registers
#+begin_src emacs-lisp :results silent
  (dolist
      (r `((?i (file . ,(concat fyj/emacs-directory "init.el")))
           (?I (file . ,(let* ((user user-login-name)
                               (org (expand-file-name (concat user ".org") fyj/emacs-directory))
                               (el  (expand-file-name (concat user ".el") fyj/emacs-directory))
                               (dir (expand-file-name user fyj/emacs-directory)))
                          (cond
                           ((file-exists-p org) org)
                           ((file-exists-p el)  el)
                           (t dir)))))
           (?f (file . ,(concat fyj-dir "fyj.org")))
           (?s (file . ,(concat fyj-dir "fyj-settings.org")))))
    (set-register (car r) (cadr r)))
#+end_src
** Store Text in Register
   寄存器的名称可以是单个数字0~9或单个字母。
   - 保存字符串到一个寄存器中
     =copy-to-register=  快捷键： =C+x r s= , 然后选择数据 =3= ，这样字
     符串就会保存在寄存器3中。
   - 粘贴字符串
     =insert-register= 快捷键:  =C+x r i= , 然后输入寄存器的名称。



