#+TITLE:  Emacs配置文件
#+AUTHOR: 付亚军
#+EMAIL:  fuyajun1983cn@163.com

* 介绍
  这是我的emacs配置主文件, 采用[[http://www.orgmode.org][org-mode]] 编写。 

* emacs使用版本
  使用如下命令查看emacs版本
  #+BEGIN_SRC sh
  emacs --version
  #+END_SRC

  #+RESULTS:
  | GNU       | Emacs | 24.5.1       |        |            |             |           |        |          |       |          |
  | Copyright | (C)   | 2015         | Free   | Software   | Foundation, | Inc.      |        |          |       |          |
  | GNU       | Emacs | comes        | with   | ABSOLUTELY | NO          | WARRANTY. |        |          |       |          |
  | You       | may   | redistribute | copies | of         | Emacs       |           |        |          |       |          |
  | under     | the   | terms        | of     | the        | GNU         | General   | Public | License. |       |          |
  | For       | more  | information  | about  | these      | matters,    | see       | the    | file     | named | COPYING. |

  #+BEGIN_SRC emacs-lisp 
    (require 'server)
    (unless (server-running-p)
      (server-start))
  #+END_SRC

* 启动阶段禁用垃圾收集
#+BEGIN_SRC emacs-lisp
  ;;----------------------------------------------------------------------------
  ;; Temporarily reduce garbage collection during startup
  ;;----------------------------------------------------------------------------
  (defconst fyj/initial-gc-cons-threshold gc-cons-threshold
    "Initial value of `gc-cons-threshold' at start-up time.")
  (setq gc-cons-threshold (* 128 1024 1024))
  (add-hook 'after-init-hook
            (lambda () (setq gc-cons-threshold fyj/initial-gc-cons-threshold)))
#+END_SRC

* 基本设置
  
** 主要目录位置

   #+BEGIN_SRC emacs-lisp
     (defconst fyj/emacs-directory (concat (getenv "HOME") "/.emacs.d/"))
     (defun fyj/emacs-subdirectory(d) (expand-file-name d fyj/emacs-directory))
   #+END_SRC

** 主要目录结构

   第一次运行时，需要创建如下目录:

   - elisp: 存放第三方snippets或自己写的代码
   - backups: 备份
   - snippets: 代码片断
   - ac-dict: 字典补全
   - src: 无法从emacs package manager路径上下载的第三方插件
   
   #+BEGIN_SRC emacs-lisp
     (let* ((subdirs '("elisp" "backups" "snippets" "ac-dict" "src"))
            (fulldirs (mapcar (lambda (d) (fyj/emacs-subdirectory d)) subdirs)))
       (dolist (dir fulldirs)
         (when (not (file-exists-p dir))
           (message "Make directory: %s" dir)
           (make-directory dir))))
   #+END_SRC

** 自定义custom.el文件
   #+BEGIN_SRC emacs-lisp
     (setq custom-file (expand-file-name "custom.el" fyj/emacs-directory))
     (when (file-exists-p custom-file)
       (load custom-file))
   #+END_SRC

** 设置加载路径

   一些精短的工具，放到elisp目录下：
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path (fyj/emacs-subdirectory "elisp"))
   #+END_SRC

   一些无法从emacs package manager获取的包，放到src目录下：
   #+BEGIN_SRC emacs-lisp
     (let ((elisp-dir (expand-file-name "src" fyj/emacs-directory)))
       ;; add the src directory to the load path
       (add-to-list 'load-path elisp-dir)
       ;; load specific files
       (when (file-exists-p elisp-dir)
         (let ((default-directory elisp-dir))
           (normal-top-level-add-subdirs-to-load-path))))
     (setq autoload-file (concat fyj/emacs-directory "loaddefs.el"))
     (setq package-user-dir (concat fyj/emacs-directory "elpa"))   
   #+END_SRC

** 公共常量定义

   #+BEGIN_SRC emacs-lisp
     (defconst *is-in-windows* (string= system-type "windows-nt"))
     (defconst *is-in-cygwin* (string= system-type "cygwin"))
     (defconst *is-in-linux* (string= system-type "gnu/linux"))
   #+END_SRC

* 包初始化及加载工具配置
** Package Manager地址设置
  #+begin_src emacs-lisp
    (require 'package)
    (setq package-archives
              '(;("gnu" . "https://elpa.gnu.org/packages/")   
    ;            ("org" . "http://orgmode.org/elpa/")   
                ("melpa" . "https://melpa.org/packages/")    
                ("marmalade" . "https://marmalade-repo.org/packages/")))
  #+end_src

** 初始化包管理器

   #+BEGIN_SRC emacs-lisp
     (package-initialize)
   ;  (package-refresh-contents)
   #+END_SRC

** 定义管理包的一些函数

   - 检查当前包是否已经加载

     #+begin_src emacs-lisp
       (defun fyj/package-loadable-p (package)
         "Check if PACKAGE is loadable from a directory in `load-path'."
         (let ((load-file (concat (symbol-name package) ".el")))
           (catch 'file-found
             (dolist (dir load-path)
               (let ((path (expand-file-name load-file dir)))
                 (when (file-exists-p path)
                   (throw 'file-found path)))))))
     #+end_src

   - 安装包
        
      #+begin_src emacs-lisp
        (defun fyj/package-install-if-needed (&rest packages)
          "Install PACKAGES using ELPA if they are not loadable or installed locally."
          (when packages
            (unless package-archive-contents
              (package-refresh-contents))
            (dolist (package packages)
              (unless (or (fyj/package-loadable-p package)
                          (package-installed-p package))
                (package-install package)))))
      #+end_src

** 引入一些常用的包
   #+begin_src emacs-lisp
     (require 'cl)
     (require 'cl-lib)
     (require 'saveplace)
     (require 'ffap)
     (require 'uniquify)
     (require 'ansi-color)
     (require 'recentf)
   #+end_src

** 安装一些常见包

   #+BEGIN_SRC emacs-lisp
     (fyj/package-install-if-needed 'diminish)
     (fyj/package-install-if-needed 'scratch)
   #+END_SRC

*** use-package

      The =use-package= macro allows you to isolate package
      configuration in your .emacs file in a way that is both
      performance-oriented and, well, tidy.

      github url: [[https://github.com/jwiegley/use-package]]

      - install 
        #+BEGIN_SRC emacs-lisp
          (fyj/package-install-if-needed 'use-package)
        #+END_SRC
      - basic configuration
        #+BEGIN_SRC emacs-lisp
          (eval-when-compile
            (require 'use-package))
          (require 'diminish)                ;; if you use :diminish
;          (require 'bind-key)     
          (use-package bind-key
              :ensure t
              :config
               (require 'bind-key))                ;; if you use any :bind variant
          (setq use-package-verbose t)
          (use-package auto-compile
            :ensure t
            :config (auto-compile-on-load-mode))
          (setq load-prefer-newer t)
        #+END_SRC

** 加载其他的org文件

    #+begin_src emacs-lisp
      (defun fyj/org-load (file &optional header-or-tag)
        "Load configuration from other fyj-*.org files.
      If the optional argument is the id of a subtree then only
      configuration from within that subtree will be loaded.  If it is
      not an id then it will be interpreted as a tag, and only subtrees
      marked with the given tag will be loaded.

      For example, to load all of fyj-lisp.org simply
      add (fyj/org-load \"lisp\") to your configuration.

      To load only the 'window-system' config from
      fyj-misc-recommended.org add
       (fyj/org-load \"misc-recommended\" \"window-system\")
      to your configuration."
        
        (let ((file (expand-file-name (if (string-match "fyj-.+\.org" file)
                                          file
                                        (format "fyj-%s.org" file))
                                      fyj/emacs-directory)))
          (org-babel-load-file
           (if header-or-tag
               (let* ((base (file-name-nondirectory file))
                      (dir  (file-name-directory file))
                      (partial-file (expand-file-name
                                     (concat "." (file-name-sans-extension base)
                                             ".part." header-or-tag ".org")
                                     dir)))
                 (unless (file-exists-p partial-file)
                   (with-temp-file partial-file
                     (insert
                      (with-temp-buffer
                        (insert-file-contents file)
                        (save-excursion
                          (condition-case nil ;; collect as a header
                              (progn
                                (org-link-search (concat"#"header-or-tag))
                                (org-narrow-to-subtree)
                                (buffer-string))
                            (error ;; collect all entries with as tags
                             (let (body)
                               (org-map-entries
                                (lambda ()
                                  (save-restriction
                                    (org-narrow-to-subtree)
                                    (setq body (concat body "\n" (buffer-string)))))
                                header-or-tag)
                               body))))))))
                 partial-file)
             file))))
    #+end_src
     
* 加载各个子模块/扩展

** 全局设置加载
   
   #+BEGIN_SRC emacs-lisp 
     (fyj/org-load "settings")
   #+END_SRC
** org设置

   #+BEGIN_SRC emacs-lisp
     (fyj/org-load "org")
   #+END_SRC

** 文本编辑设置
   :PROPERTIES:
   :Effort:   
   :END:

   #+BEGIN_SRC emacs-lisp
     (fyj/org-load "editing")
   #+END_SRC

** 加载模式
     #+BEGIN_SRC emacs-lisp
       (fyj/org-load "modes")
     #+END_SRC
