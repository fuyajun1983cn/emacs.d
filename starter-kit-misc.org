#+TITLE: 一些简短实用的设置
#+OPTIONS: toc:nil num:nil ^:nil



* Misc Settings
Things that don't fit anywhere else.

** 一些模式无关设置
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
  ;; ask me when I quit emacs
  (set-variable 'confirm-kill-emacs 'yes-or-no-p)

  (setq-default regex-tool-backend 'perl)

  ;;设置打开文件的缺省路径
  (setq default-directory "~/")

  ;;设定不产生备份文件
  (setq make-backup-files nil)
  (setq-default make-backup-files nil)

  ;;鼠标中键可以粘贴
  (setq mouse-yank-at-point t)

  ;;设置个人信息
  (setq user-full-name "Fu Yajun")
  (setq user-mail-address "fuyajun1983cn@163.com")

  ;;自动在文件末增加一行
  (setq require-final-newline t)

  ;;当光标在行尾上下移动的时候，始终保持在行尾
  (setq track-eol t) 

  ;;新行自动缩进
  (define-key global-map (kbd "RET") 'newline-and-indent)

  (defalias 'list-buffers 'ibuffer) ; make ibuffer default

  ;always show line numbers
  (global-linum-mode 1)

  ;hilight current line globally
  (global-hl-line-mode 1)

  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  (set-buffer-file-coding-system 'utf-8)
  (set-file-name-coding-system 'utf-8)

#+END_SRC
** Color Themes
Emacs24 has build in support for saving and loading themes.

A Theme builder is available at http://elpa.gnu.org/themes/ along with
a list of pre-built themes at http://elpa.gnu.org/themes/view.html and
themes are available through ELPA.

Downloaded themes may be saved to the =themes/= directory in the base
of the starter kit which ignored by git.  Once downloaded and
evaluated a theme is activated using the =load-theme= function.

#+BEGIN_SRC emacs-lisp
  (set-background-color "black")
  (set-foreground-color "green")
#+END_SRC

** Window systems
#+srcname: starter-kit-window-view-stuff
#+begin_src emacs-lisp 
  (when window-system
    (setq frame-title-format '(buffer-file-name "%f" ("%b")))
    (blink-cursor-mode -1)
    (when (require 'mwheel nil 'no-error) (mouse-wheel-mode t)))
  
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  
  (setq visible-bell t
        echo-keystrokes 0.1
        font-lock-maximum-decoration t
        inhibit-startup-message t
        transient-mark-mode t
        color-theme-is-global t
        delete-by-moving-to-trash t
        shift-select-mode nil
        truncate-partial-width-windows nil
        uniquify-buffer-name-style 'forward
        whitespace-style '(trailing lines space-before-tab
                                    indentation space-after-tab)
        whitespace-line-column 100
        ediff-window-setup-function 'ediff-setup-windows-plain
        oddmuse-directory (concat starter-kit-dir "oddmuse")
        xterm-mouse-mode t
        save-place-file (concat starter-kit-dir "places"))
#+end_src
   
*** 关闭一些GUI特征
#+BEGIN_SRC emacs-lisp
  ;;----------------------------------------------------------------------------
  ;; Suppress GUI features
  ;;----------------------------------------------------------------------------
  (setq use-file-dialog nil)
  (setq use-dialog-box nil)
  (setq inhibit-startup-screen t)
  (setq inhibit-startup-echo-area-message t)

#+END_SRC
   
*** 常用的一些行为设置  
#+BEGIN_SRC emacs-lisp
  ;;----------------------------------------------------------------------------
  ;; Show a marker in the left fringe for lines not in the buffer
  ;;----------------------------------------------------------------------------
  (setq indicate-empty-lines t)


  ;;----------------------------------------------------------------------------
  ;; Window size and features
  ;;----------------------------------------------------------------------------
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (fboundp 'set-scroll-bar-mode)
    (set-scroll-bar-mode nil))

  (let ((no-border '(internal-border-width . 0)))
    (add-to-list 'default-frame-alist no-border)
    (add-to-list 'initial-frame-alist no-border))

  (defun sanityinc/adjust-opacity (frame incr)
    "Adjust the background opacity of FRAME by increment INCR."
    (unless (display-graphic-p frame)
      (error "Cannot adjust opacity of this frame"))
    (let* ((oldalpha (or (frame-parameter frame 'alpha) 100))
           ;; The 'alpha frame param became a pair at some point in
           ;; emacs 24.x, e.g. (100 100)
           (oldalpha (if (listp oldalpha) (car oldalpha) oldalpha))
           (newalpha (+ incr oldalpha)))
      (when (and (<= frame-alpha-lower-limit newalpha) (>= 100 newalpha))
        (modify-frame-parameters frame (list (cons 'alpha newalpha))))))

  ;; TODO: use seethru package instead?
  (global-set-key (kbd "M-C-8") (lambda () (interactive) (sanityinc/adjust-opacity nil -2)))
  (global-set-key (kbd "M-C-9") (lambda () (interactive) (sanityinc/adjust-opacity nil 2)))
  (global-set-key (kbd "M-C-0") (lambda () (interactive) (modify-frame-parameters nil `((alpha . 100)))))

  (add-hook 'after-make-frame-functions
            (lambda (frame)
              (with-selected-frame frame
                (unless window-system
                  (set-frame-parameter nil 'menu-bar-lines 0)))))

  (setq frame-title-format
        '((:eval (if (buffer-file-name)
                     (abbreviate-file-name (buffer-file-name))
                   "%b"))))

  ;; Non-zero values for `line-spacing' can mess up ansi-term and co,
  ;; so we zero it explicitly in those cases.
  (add-hook 'term-mode-hook
            (lambda ()
              (setq line-spacing 0)))

#+END_SRC

** Save a list of recent files visited.
#+begin_src emacs-lisp 
(recentf-mode 1)
#+end_src emacs-lisp

** Highlight matching parentheses when the point is on them.
#+srcname: starter-kit-match-parens
#+begin_src emacs-lisp 
(show-paren-mode 1)
#+end_src

** ido mode
ido-mode is like magic pixie dust!
#+srcname: starter-kit-loves-ido-mode
#+begin_src emacs-lisp 
(when (> emacs-major-version 21)
  (ido-mode t)
  (setq ido-enable-prefix nil
        ido-enable-flex-matching t
        ido-create-new-buffer 'always
        ido-use-filename-at-point t
        ido-max-prospects 10))
#+end_src

** Don't clutter up directories with files~
Rather than saving backup files scattered all over the file system,
let them live in the =backups/= directory inside of the starter kit.
#+begin_src emacs-lisp
(setq backup-directory-alist `(("." . ,(expand-file-name
                                        (concat starter-kit-dir "backups")))))
#+end_src

** auto complete mode
#+BEGIN_SRC emacs-lisp
  ;;                                             ;;
  ;;**************auto-complete模式相关配置*******;;
  ;;                                             ;;
  ;;*********************************************;;
  (starter-kit-install-if-needed 'auto-complete)
  (require 'auto-complete-config)
  (ac-config-default)
  ;;(add-to-list 'ac-dictionary-directories "~/.emacs.d/mode/auto-complete/dict")
  (define-key ac-mode-map (kbd "M-/") 'auto-complete);;auto-complete command
  ;;trigger auto-complete
  ;(ac-set-trigger-key "TAB")
  (setq ac-auto-start 3);当播入3个字符的时候，开始自动补全
  ;;complete menu color
  (set-face-background 'ac-candidate-face "lightgray")
  (set-face-underline 'ac-candidate-face "darkgray")
  (set-face-background 'ac-selection-face "steelblue")
  ;My Dictionary
  ;;(add-to-list 'ac-user-dictionary-files "~/.emacs.d/mydict")

#+END_SRC
** Scale Font size
#+begin_src emacs-lisp 
  ;;(define-key global-map (kbd "C-+") 'text-scale-increase)
  ;;(define-key global-map (kbd "C--") 'text-scale-decrease)
  ;;
  ;;放大字体: Ctrl-x Ctrl-+ 或 Ctrl-x Ctrl-=
  ;;缩小字体: Ctrl-x Ctrl–
  ;;重置字体: Ctrl-x Ctrl-0
  (if *is-a-windows*
      (progn
          ;; For Windows
         (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
         (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease))
  (progn
    ;; For Linux
    (global-set-key (kbd "<C-mouse-4>") 'text-scale-increase)
    (global-set-key (kbd "<C-mouse-5>") 'text-scale-decrease)))

#+end_src
   
** Magit Mode
   Magit模式是emacs下的一个非常好用的git操作界面。  
*** 安装 (注：只支持emacs 24.4之后的版本)
    #+BEGIN_SRC emacs-lisp
      (when (version<= "24.4" emacs-version)
           (starter-kit-install-if-needed 'magit))
    #+END_SRC

*** 基本操作指南

    1. 查看项目状态  
       #+BEGIN_SRC sh
       magit-status
       #+END_SRC

    2. 查看差异

       使用Tab键可以调用diff查看差异（magit-section-toggle）

    3. 常用的几个命令
       - magit-stage  Press [s] to add file unser cursor to stage.

       - magit-stage-modified  Press [S] to add all tracked files to stage.

       - magit-unstage  Press [u] to unstage the file under cursor.

       - magit-reset-index  press [U] to unstage all staged files.

       - Press [c c ] to write a commit message, then [C - c C -c ] to
         commit.

    4. git push

       press [P P] to push. (magit-push-pop)

    5. git pull

       press [F F] to pull. (magit-pull-popup)

    6. git log

       call magit-log to see your commit log. Press Enter on a a line
       to see its diff. 


       
